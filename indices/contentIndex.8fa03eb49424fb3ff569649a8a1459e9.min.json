{"/":{"title":"Conpay Docs","content":"\nConpay backend\n\nthe present documentation aims to explain and describe the functionalities and the technologic stack used on this project. \n\nThis API service is build using Next and Supabase and it provides all the necessary paths to interact with Conpay. The authentication is made in the front-end using Supabase sdk. Then on every call the user's  JWT token must be provided for authentication on the server. The JWT token will be used for query the user id and perform all  CRUD operations on the user's behalf, wich will enforce all row level security on the database, meaning that the user only can alter data that belong to him (except for the public tables).\n\n## API ENDPOINTS \n\nWe can split the endpoints into two categories getter and setters that will handle users tokens, nfts, friends and history. Getters will be responsible for fetching users information (read data). Setters will then be responsible for changing states (write data).\n\n- Getters\n\t- [[fetchFriends]]\n\t- [[fetchHistory]]\n\t- [[fetchTokenBalance]]\n\t- [[fetchUserNfts]]\n\tGetters expect an authenticated user's token and should return the specific desired object.\n\n- Setters\n\t[[addFriend]]\n\t[[buyNfts]]\n\t[[removeFriend]]\n\t[[sendNft]]\n\t[[sendToken]]\n\nThose endpoints can be organized accourding to its functions:\n\n#### Tokens\n - [[fetchTokenBalance]]\n - [[fetchHistory]]\n - [[sendToken]]\n\n### Nfts\n- [[fetchUserNfts]]\n- [[sendNft]]\n- [[buyNfts]]\n\n### Friendlist \n - [[addFriend]]\n - [[removeFriend]]\n\nThis application handles only the features above, the signup process aswell the profile update will be done directly on the front end calling the respectives [[Supabase functions]] to authentication and profile creation.\n\n\n\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/ERC1155":{"title":"ERC1155","content":"\nNFT Standart.","lastmodified":"2023-01-26T05:34:26.237808445Z","tags":null},"/ERC1155-ABI":{"title":"","content":"This is the human readable representation of a smart contract, in our case the nft standard [[ERC1155]], that represents the most common contract interface out there.","lastmodified":"2023-01-26T05:34:26.237808445Z","tags":null},"/INDEX":{"title":"","content":"\nConpay backend\n\nthe present documentation aims to explain and describe the functionalities and the technologic stack used on this project. \n\nThis API service is build using Next and Supabase and it provides all the necessary paths to interact with Conpay. The authentication is made in the front-end using Supabase sdk. Then on every call the user's  JWT token must be provided for authentication on the server. The JWT token will be used for query the user id and perform all  CRUD operations on the user's behalf, wich will enforce all row level security on the database, meaning that the user only can alter data that belong to him (except for the public tables).\n\n## API ENDPOINTS \n\nWe can split the endpoints into two categories getter and setters that will handle users tokens, nfts, friends and history. Getters will be responsible for fetching users information (read data). Setters will then be responsible for changing states (write data).\n\n- Getters\n\t- [[fetchFriends]]\n\t- [[fetchHistory]]\n\t- [[fetchTokenBalance]]\n\t- [[fetchUserNfts]]\n\tGetters expect an authenticated user's token and should return the specific desired object.\n\n- Setters\n\t[[addFriend]]\n\t[[buyNfts]]\n\t[[removeFriend]]\n\t[[sendNft]]\n\t[[sendToken]]\n\nThose endpoints can be organized accourding to its functions:\n\n#### Tokens\n - [[fetchTokenBalance]]\n - [[fetchHistory]]\n - [[sendToken]]\n\n### Nfts\n- [[fetchUserNfts]]\n- [[sendNft]]\n- [[buyNfts]]\n\n### Friendlist \n - [[addFriend]]\n - [[removeFriend]]\n\nThis application handles only the features above, the signup process aswell the profile update will be done directly on the front end calling the respectives [[Supabase functions]] to authentication and profile creation.\n\n\n\n","lastmodified":"2023-01-26T05:34:26.237808445Z","tags":null},"/addFriend":{"title":"Add Friend","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/addFriend.js)\n\nWith the finality of adding a new friend to the friend list, this endpoint will alter the respective user's row in the [[friend_list table]]. To do that user must send the token and a **target**, that could be either a email, phone or wallet address of another conpay user. The data base will query for either field, find the respective id and append to the friend list array.\n\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/buyNfts":{"title":"Buy Nfts","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/buyNFTs.js)\n\n\nThis endpoint expect ERC1155  address. When a new transaction is initiated, the address and id passed in the body of the request will be used to populate one transaction using [[ERC1155 ABI]] , address and id.\nThe unsigned transaction is then inserted on the [[orders table]], which will be broadcasted to mobile app so the user can [[sign transaction]]. \n\n\n\n\n```js\nconst { token, address, id } = req.body;\n\nconst wallet = await getUserWallet(token);\n\nif (wallet) {\n\nconst tx = await buyNFT(address, id);\n\nconsole.log(tx);\n\nconst { data, error } = await supabase.from(\"orders\").insert({\n\nuser_id: _user.id,\n\npayload: JSON.stringify(tx),\n\nstatus: \"initiated\",\n\n});\n```\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/fetchFriends":{"title":"Fetch Friends","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/fetchFriend.js )\n\n\n\n\u003cdetails\u003e\n\u003csummary\u003erefactor details\u003c/summary\u003e\nUpdate function to perform a single query to supabase instead of nested queries.\n\u003c/details\u003e\n\nIn supabase we have   [[friend_list table]], this endpoint takes the JWT send in the request to define the user, then query this table the user's friends ids then query again those ids to get full information (note: this function will be update later for a single query to supabase).\n\n\tCore function code, inside api_helpers.js\n``` Javascript\nconst getFriendsIds = async (token) =\u003e {\n\nconst {\n\ndata: { user },\n\nerror: errorUser,\n\n} = await supabase.auth.getUser(token);\n\n  \n\nconst { data: friend_list, error } = await supabase\n\n.from(\"friend_list\")\n\n.select(\"friends\")\n\n.eq(\"user\", user.id)\n\n.single();\n\n  \n\nif (error) {\n\nconsole.log(error);\n\n}\n\nif (friend_list) {\n\nreturn friend_list.friends;\n\n}\n\n};\n\n  \n\nconst getFriends = async (token) =\u003e {\n\nconst friendsIds = await getFriendsIds(token);\n\nif (friendsIds) {\n\nconst { data: friends, error } = await supabase\n\n.from(\"profiles\")\n\n.select(\"*\")\n\n.in(\"id\", friendsIds);\n\nif (error) {\n\nconsole.log(error);\n\n}\n\nif (friends) {\n\nreturn friends;\n\n}\n\n}\n\n};\n\n```","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/fetchHistory":{"title":"Fetch History","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/fetchHistory.js)\n\n\n\n\n\n\nThis endpoint will fetch all users transaction on the [[transactions table]]. The table desn't specify if the transaction is from a type *send* or *receive*, it only retrieve all transactions that the user was involved, being responsability of the front end to diferentiate a *send* transaction when the user's id is on the **from** column, and define a *receive* transaction when the user's id is on the **to** column.\n\nIf the transaction was made to an external wallet, the **to** column will be empty, and **external_wallet** column will hold the destiny address.\n\n\n#refactor\n\u003cdetails\u003e\n\u003csummary\u003erefactor details\u003c/summary\u003e\n\ncurrently conpay will only register outgoing transactions (from conpay to external wallet), to register ongoing transactions a blockchain event watcher must be implemented for pooling on chain transactions and populate  [[transactions table]] accourdingly, but this is not a priority now\n\n\u003c/details\u003e\n\n\n\n\n\n\tCore function code, inside api_helpers.js\n``` Javascript\nconst getUserHistory = async (token) =\u003e {\n\nconst {\n\ndata: { user },\n\nerror: errorUser,\n\n} = await supabase.auth.getUser(token);\n\n  \n\nif (errorUser) {\n\nconsole.log(errorUser);\n\nreturn false;\n\n}\n\nconst { data: history, error: errorHistory } = await supabase\n\n.from(\"transactions\")\n\n.select(\n\n`*, from (wallet_address, username), to (wallet_address, username)`\n\n)\n\n.or(`from.eq.${user.id},to.eq.${user.id}`)\n\n.order(\"created_at\", { ascending: false });\n\nif (errorHistory) {\n\nconsole.log(errorHistory);\n\nreturn false;\n\n}\n\nreturn history;\n\n};\n\n```","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/fetchTokenBalance":{"title":"Fetch Token Balance","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/fetchTokenBalance.js)\n\nThis endpoint will take the JWT token send in the body and retrieve the user's [[wallet object]] , then simply call `wallet.getBalance()`, parse and return the value.\n\n``` Javascript\nconst wallet = await getUserWallet(token);\n\nif (wallet) {\n\nconst balance = await wallet.getBalance();\n\nres.status(200).json({\n\nsuccess: true,\n\nmessage: \"Success\",\n\nbalance: ethers.utils.formatEther(balance),\n\n});\n\nreturn;\n```\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/fetchUserNfts":{"title":"Fetch User Nfts","content":"\n[github](https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/fetchUserNfts.js)\n\n\n\n\nThis endpoit make use of another API, Moralis.\n\u003cdetails\u003e\u003csummary\u003eWhy Moralis?\u003c/summary\u003e\n Moralis indexes all nft transactions on a chain and provide all transactions information, with that it's possible to query all nft's that a certain wallet hold. it's possible to build our own indexer, but seems like reinventing the whell.\u003c/details\u003e\n\nThis and the [[onramp]], will be the only external services that conpay will be using.\n\nWhen invoked, this endpoint will retrieve the user's wallet address from database, then call Morali's API that will return all NFT's addresses and id's of a specific address. With that we invoke the ERC1155 function *uri*, that will return the nft metadata.\n\nwe need to do this iteractive process because moralis returns only address and id's, we still have to fetch the metadata uri for every single nft, which can slowdown the process of retrieving.  \n\nThis issue happens most for external nfts, for conpay for business we will have total control over urls and metadata.\n\nThere are two functions fetchUserNFTsIndex ,that will call Moralis API and return all address and id's, and fetchUserNFTsMetadata that will query for every single nft contract for the url and call it for the nft's metadata.\n\n\n\n\tCore function code, inside api_helpers.js\n``` Javascript\nconst fetchUserNFTsIndex = async (address) =\u003e {\n\nconst options = {\n\nmethod: \"GET\",\n\nurl: `https://deep-index.moralis.io/api/v2/${address}/nft`,\n\nparams: { chain: \"0x61\", format: \"decimal\" },\n\nheaders: {\n\naccept: \"application/json\",\n\n\"X-API-Key\":\n\n\"OWkwoRwEpX25DCOw8Tm932gCp4mwRsfafJZXQmZ0DAzWRo3x0T9vU1zmp2H0IfzU\",\n\n},\n\n};\n\nconst result = await axios.request(options);\n\nreturn result.data.result;\n\n};\n\nconst fetchUserNFTsMetadata = async (address) =\u003e {\n\nconst nfts = await fetchUserNFTsIndex(address);\n\nconst nftsWithMetadata = [];\n\nconst nftsMetadataMissing = [];\n\nconsole.log(\"nfts:\", nfts.length);\n\nnfts.map((nft) =\u003e {\n\nif (!nft.metadata) {\n\nnftsMetadataMissing.push(nft);\n\n} else {\n\nif (typeof nft.metadata === \"string\") {\n\nnft.metadata = JSON.parse(nft.metadata);\n\n}\n\nnftsWithMetadata.push(nft);\n\n}\n\n});\n\nawait Promise.all(\n\nnftsMetadataMissing.map(async (nft) =\u003e {\n\ntry {\n\nconst metadata = await axios.get(nft.token_uri);\n\nnft.metadata = metadata.data;\n\n} catch (error) {}\n\n})\n\n);\n\nconst nftsArray = nftsWithMetadata.concat(nftsMetadataMissing);\n\nreturn nftsArray;\n\n};\n\n```","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/friend_list-table":{"title":"","content":"[Link to supabse](https://app.supabase.com/project/xwqeteefinbzmgbziaoc/editor/27276)\n\nThe friend list table contains a relation of one to many of users id, which each row has two columns the first holds the user's id, the second is an id array that hold all user's friends id.\n\nex:\n![[Screenshot from 2023-01-25 01-57-22.png]]\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"Conpay Docs\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\nYou can also use wikilinks if that is what you are more comfortable with!\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2023-01-26T05:34:26.241808413Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have Docker installed already, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nNow that you are happy with how your Quartz instance looks, let's get it hosted!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/test":{"title":"","content":"this is a test page","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/orders-table":{"title":"","content":"table that will hold all request for signing transactions, please don't confuse with [[transactions table]], that hold the token transfer history.\n\n#refactor \n\u003cdetails\u003e\nUpdate table names to avoid confusion.\n\u003c/details\u003e\n\nThis table uses of the Realtime feature of the database, that provides a subscription based framework to broadcast information to subscribed users, it also utilize the row level security that ensures only allowed users will recieve the messeges.\n\nIt has 7 columns:\n- **id**: unique indentifier of the transaction.\n- **created_at**: transaction timestamp.\n- **payload**: transaction body.\n- **status**: currently state (initiated or signed).\n- **hash**: transaction hash for complete transactions.\n\n\n\u003e [!INFO]\n\u003e Note that the table doesn't have a user id column, it's because the table have a row level security, meaning that users will only be able to read and update their own records.\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/removeFriend":{"title":"","content":"#giturl https://github.com/AlexandreColauto/conpay-backend/blob/main/pages/api/addFriend.js\n#setter\n\nExpect an ","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/sign-transaction":{"title":"","content":"Signature process:\n\n```mermaid \ngraph LR \n\nMarketplace --\u003e Supabase --\u003e id1(Mobile App) --\u003e Blockchain \n```\n\nThe process start on marketplace with an authenticated user calling the [[buyNfts]] endpoint with the nft address, id and user's token. The transaction is inserted on the [[orders table]] and broadcasted. The mobile app will recieve a new event with the unsigned transaction and will prompt for the user's approval, if accpted the transaction is send to be processed on the blockchain, completing this way the transaction lifecycle.","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/transactions-table":{"title":"","content":"\nit holds  all transactions made in conpay. This table is composed of 6 columns:\n- **id**: unique's transaction id\n- **created at**: timestamp of transaction.\n- **from**: initiator's id (the id of the user who start the transaction)\n- **to**: reciever's id.\n- **amount**: quantity of tokens transfered in transaction.\n- **hash**: the transaction hash on the blockchain.\n- **external_wallet**: if the transaction is made **to** an external wallet (outside of conpay), then the address is stored here. ( ==Disclaimer==: only **send** transactions to external wallet will be recorded because is handled by our system, since to record a **receive** transaction a event watcher shold be developed to monitor the blockchain for transactions to user wallet)\n\n![[Pasted image 20230125183836.png]]\n\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null},"/wallet-object":{"title":"","content":"Conpay uses ethers js as tool for handeling wallet actions, such as create new wallet, initiate transaction, fetch balance.\n\nWhenever a new conpay account is created  a random wallet is created at the same time and the mnemonic phrase is stored in database. \n\nTo perform any action on the wallet, first retrieve the mnemonic from database, then mount a local hd wallet using ethers and the mnemonic:\n\n``` Javascript\nconst mnemonic = jwt.verify(data.wallet, user.id);\n\nconst wallet = ethers.Wallet.fromMnemonic(mnemonic.wallet);\n\nconst url = \"https://data-seed-prebsc-1-s3.binance.org:8545\";\n\nconst provider = new ethers.providers.JsonRpcProvider(url);\n\nif (provider) {\n\nconst connectedWallet = wallet.connect(provider);\n\nreturn connectedWallet;\n\n}\n```\n\nUsing this object we will perform all on chain operations either reading or writing data on chain.\n\n\u003cdetails\u003e\n\u003csummary\u003eFutures Updates\u003c/summary\u003e\n\nTo improve security in the future a method can be implemented at database level for returning the wallet object complete instead of the mnemonics for building locally. \n\n\u003c/details\u003e\n","lastmodified":"2023-01-26T05:34:26.24580838Z","tags":null}}